<%@ val configuration: io.phdata.pipewrench.configuration.Configuration %>
<%@ val table: io.phdata.pipewrench.configuration.TableDefinition %>
<%@ val typeMapping: Map[String, Map[String, String]]%>
set sync_ddl=1;
USE `${configuration.hadoop.stagingDatabase.name}`;
CREATE TABLE IF NOT EXISTS `${configuration.hadoop.stagingDatabase.name}`.`arch_${table.destinationName}` (
<%
    val columnDefinitions = table.columns.map {
    column =>
        val mappedDataType = io.phdata.pipewrench.util.TemplateFunction.mapDataType(column, typeMapping, "AVRO")
        val dataType = if (mappedDataType.equalsIgnoreCase("DECIMAL")) {
            s"DECIMAL(${column.precision.get}, ${column.scale.get})"
        } else {
            mappedDataType
        }
        s"`${column.destinationName}` $dataType COMMENT '${column.comment.getOrElse("")}'"
        }.mkString(",\n")
%>
${columnDefinitions}
)
PARTITIONED BY (ingest_date STRING)
COMMENT '${table.comment.getOrElse("")}'
STORED AS AVRO
LOCATION '${configuration.hadoop.stagingDatabase.path}/arch_${table.destinationName}'
TBLPROPERTIES(
'avro.schema.url' = '${configuration.hadoop.stagingDatabase.path}/arch_${table.destinationName}/.meta/arch_${table.destinationName}.avsc'
)