<%--
Copyright 2018 phData Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--%>
<%@ val configuration: io.phdata.pipewrench.configuration.Configuration %>
<%@ val table: io.phdata.pipewrench.configuration.TableDefinition %>
<% val primaryKeyStmt = table.primaryKeys.map(k => s"t.$k = s.$k").mkString(" AND ")%>
<% val columnStr = table.columns.map(_.destinationName).mkString(", ") %>
<% val columnSourceStr = table.columns.map(column => s"s.${column.destinationName}").mkString(", ")%>
<% val updateColumnStr = table.columns.map(column => s"${column.destinationName} = s.${column.destinationName}").mkString(", ")%>
CREATE TASK IF NOT EXISTS ${configuration.snowflake.get.stagingDatabase.name}.${configuration.snowflake.get.stagingDatabase.schema.get}.${table.destinationName}_task
    WAREHOUSE = ${configuration.snowflake.get.warehouse}
    SCHEDULE = '${configuration.snowflake.get.taskSchedule}'
    WHEN SYSTEM$STREAM_HAS_DATA('${table.destinationName}_stream')
    AS
        MERGE INTO ${configuration.snowflake.get.reportingDatabase.name}.${configuration.snowflake.get.reportingDatabase.schema.get}.${table.destinationName} t
            USING ${configuration.snowflake.get.stagingDatabase.name}.${configuration.snowflake.get.stagingDatabase.schema}.${table.destinationName}_stream s ON ${primaryKeyStmt}
            WHEN NOT MATCHED THEN INSERT (${columnStr}, dms_operation, dms_ts) VALUES (${columnSourceStr}, s.dms_operation, s.dms_ts)
            WHEN MATCHED AND s.dms_operation = 'U' THEN UPDATE SET ${updateColumnStr}, dms_operation = s.dms_operation, dms_ts = s.dms_ts
            WHEN MATCHED AND s.dms_operation = 'D' THEN DELETE;